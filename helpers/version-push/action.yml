name: 'Home Assistant helper: version-push'
description: 'GitHub action helper: version-push'
inputs:
  key:
    required: true
    default: ''
    description: "JSON key to replace version with, e.g. supervisor, homeassistant.default or hassos[] to replace for all properties in hassos."
  key-description:
    required: false
    description: "Human Friendly description of key which is beeing changed for git commit message."
  version:
    required: true
    default: ''
  channel:
    default: 'dev'
  rollout:
    required: false
    default: 'false'
    description: "Generate rollout description file for staged rollout"
runs:
  using: "composite"
  steps: 
    - shell: bash
      id: validate-input
      env:
        INPUTS_KEY: ${{ inputs.key }}
        INPUTS_VERSION: ${{ inputs.version }}
        INPUTS_KEY_DESCRIPTION: ${{ inputs.key-description }}
      run: |
        if [[ -z "$INPUTS_KEY" ]];then
          echo "::error::Missing required key 'key' input!"
          exit 1
        elif [[ -z "$INPUTS_VERSION" ]];then
          echo "::error::Missing required key 'version' input!"
          exit 1
        fi
        if [[ -z "$INPUTS_KEY_DESCRIPTION" ]];then
          echo "key-description=$INPUTS_KEY" >> "$GITHUB_OUTPUT"
        else
          echo "key-description=$INPUTS_KEY_DESCRIPTION" >> "$GITHUB_OUTPUT"
        fi

    - shell: bash
      env:
        INPUTS_CHANNEL: ${{ inputs.channel }}
      run: git clone --depth 1 --single-branch --branch "$INPUTS_CHANNEL" https://github.com/agners/home-assistant-version.git /tmp/version

    - shell: bash
      env:
        INPUTS_KEY: ${{ inputs.key }}
        INPUTS_VERSION: ${{ inputs.version }}
      run: |
        temp=$(mktemp)
        jq ".$INPUTS_KEY |= \"$INPUTS_VERSION\"" "/tmp/version/version.json" > "${temp}"
        mv "${temp}" "/tmp/version/version.json"

    - name: Generate rollout plan JSON
      shell: python
      run: |
          import json
          from datetime import datetime, timedelta

          # Define the timespan/percentage tuples: (timespan in hours, target cumulative percentage)
          rollout_stages = [
              (1, 5),       # After 1 hour, reach 5% of users
              (48, 25),     # After 48 hours, reach 25% of users
              (12, 50),     # After 12 more hours, reach 50% of users
              (36, 100)     # After 36 more hours, reach 100% of users
          ]

          # Start from the current UTC time
          current_time = datetime.utcnow()
          rollout_plan = {}

          # Generate each stage in the rollout plan
          for timespan, target_percentage in rollout_stages:
              current_time += timedelta(hours=timespan)
              rollout_plan[current_time.isoformat() + 'Z'] = target_percentage

          # Write to JSON file
          with open('/tmp/version/rollout.json', 'w') as f:
              json.dump(rollout_plan, f, indent=2)

          print('Rollout plan generated:', rollout_plan)

    - shell: bash
      env:
        INPUTS_VERSION: ${{ inputs.version }}
      run: |
        cd /tmp/version
        git commit -am "Bump ${{ steps.validate-input.outputs.key-description }} to $INPUTS_VERSION"
        git push

    - shell: bash
      run: rm -rf /tmp/version
